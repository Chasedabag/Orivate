loadstring(game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua",true))()

local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sepper2023/Scorp.xyz/refs/heads/main/LinoriaFixed'))()
local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Awakenchan/Misc-Release/main/linoracolor'))()
local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sepper2023/Scorp.xyz/refs/heads/main/SaveManagerFixed'))()

local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Camera = game.Workspace.Camera
local Players = game.Players
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

local SilentAimPart = "Head"
local SilentAim = false

local SilentFovCircle = Drawing.new("Circle")
SilentFovCircle.Radius = 20
SilentFovCircle.Visible = true
SilentFovCircle.NumSides = 128
SilentFovCircle.Thickness = 2.5
SilentFovCircle.Color = Color3.fromRGB(0,0,0)

game:GetService("RunService").RenderStepped:Connect(function()
    SilentFovCircle.Position = UserInputService:GetMouseLocation()
end)

local Window = Library:CreateWindow({
    Title = 'OneTake | Planks',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

Library.KeybindFrame.Visible = true


local Tabs = {
    Combat = Window:AddTab('Combat'),
    Visuals = Window:AddTab('Visuals'),
    Settings = Window:AddTab("Settings")
}

ThemeManager:SetLibrary(Library)
ThemeManager:ApplyToTab(Tabs.Settings)
ThemeManager:ApplyTheme("Tokyo Night")

SaveManager:SetLibrary(Library)
SaveManager:SetFolder('DahillsConfig')
SaveManager:IgnoreThemeSettings()
SaveManager:BuildConfigSection(Tabs.Settings)
Library:SetWatermark('https://discord.gg/t9yJxRy6')


local Combat_SilentAim = Tabs.Combat:AddLeftGroupbox("Silent-Aim")
local Combat_RageBot = Tabs.Combat:AddRightGroupbox("RageBot")
local Visuals_ESP = Tabs.Visuals:AddLeftGroupbox("Visuals")



Combat_SilentAim:AddToggle('SilentAim', {
    Text = "Enable",
    Default = false,
    Tooltip = nil,
    Callback = function(value)
        SilentAim = value
    end
})


Combat_SilentAim:AddDropdown('SilentHitBone', {
    Values = {"Head","HumanoidRootPart"},
    Default = 1,
    Multi = false,
    Text = "HitBone",
    Callback = function(Value)
        SilentAimPart = Value
    end
})

Combat_SilentAim:AddSlider('SilentFovSize', {
    Text = 'Size',
    Default = 20,
    Min = 0,
    Max = 250,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        SilentFovCircle.Radius = value
    end
})

Combat_RageBot:AddToggle('RageBot', {
    Text = "Enable RageBot",
    Default = false,
    Tooltip = "Enable or disable the RageBot",
    Callback = function(value)
        combat_enabled = value 
    end
})

Combat_RageBot:AddToggle('RageBot', {
    Text = "BOX ESP",
    Default = false,
    Tooltip = "box esp",
    Callback = function(value)
        combat_enabled = value 
    end
})

local Settings = {
    Box_Color = Color3.fromRGB(255, 0, 0),
    Tracer_Color = Color3.fromRGB(255, 0, 0),
    Tracer_Thickness = 1,
    Box_Thickness = 1,
    Tracer_Origin = "Bottom", -- Middle or Bottom if FollowMouse is on this won't matter...
    Tracer_FollowMouse = false,
    Tracers = false, -- Disable tracers
    Max_Distance = 1000 -- Only render ESP for players within 250 studs
}
local Team_Check = {
    TeamCheck = false, -- if TeamColor is on this won't matter...
    Green = Color3.fromRGB(0, 255, 0),
    Red = Color3.fromRGB(255, 0, 0)
}
local TeamColor = true



--// SEPARATION
local player = game:GetService("Players").LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera

local function NewQuad(thickness, color)
    local quad = Drawing.new("Quad")
    quad.Visible = false
    quad.PointA = Vector2.new(0, 0)
    quad.PointB = Vector2.new(0, 0)
    quad.PointC = Vector2.new(0, 0)
    quad.PointD = Vector2.new(0, 0)
    quad.Color = color
    quad.Filled = false
    quad.Thickness = thickness
    quad.Transparency = 1
    return quad
end

local function NewText(color)
    local text = Drawing.new("Text")
    text.Visible = false
    text.Center = true
    text.Outline = true
    text.OutlineColor = Color3.fromRGB(0, 0, 0)
    text.Color = color
    text.Size = 10 -- Fixed size
    text.Font = 2 -- Font style
    return text
end

local function Visibility(state, lib)
    for _, obj in pairs(lib) do
        obj.Visible = state
    end
end

local function ESP(plr)
    local library = {
        -- Box and black border (outline)
        black = NewQuad(Settings.Box_Thickness * 2, Color3.fromRGB(0, 0, 0)),
        box = NewQuad(Settings.Box_Thickness, Settings.Box_Color),
        -- Health bar
        healthbar = Drawing.new("Line"),
        greenhealth = Drawing.new("Line"),
        -- Name ESP
        name = NewText(Color3.fromRGB(255, 255, 255)) -- White color
    }

    local function Colorize(color)
        for _, obj in pairs(library) do
            if obj ~= library.healthbar and obj ~= library.greenhealth and obj ~= library.black then
                obj.Color = color
            end
        end
    end

    local function Updater()
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
                local HumPos, OnScreen = camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                
                -- Distance check
                local distance = (player.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                if distance <= Settings.Max_Distance then
                    if OnScreen then
                        local head = camera:WorldToViewportPoint(plr.Character.Head.Position)
                        local DistanceY = math.clamp((Vector2.new(head.X, head.Y) - Vector2.new(HumPos.X, HumPos.Y)).Magnitude, 2, math.huge)

                        -- Update Box
                        local function Size(item)
                            item.PointA = Vector2.new(HumPos.X + DistanceY, HumPos.Y - DistanceY * 2)
                            item.PointB = Vector2.new(HumPos.X - DistanceY, HumPos.Y - DistanceY * 2)
                            item.PointC = Vector2.new(HumPos.X - DistanceY, HumPos.Y + DistanceY * 2)
                            item.PointD = Vector2.new(HumPos.X + DistanceY, HumPos.Y + DistanceY * 2)
                        end
                        Size(library.box)
                        Size(library.black)

                        -- Update Health Bar
                        local d = (Vector2.new(HumPos.X - DistanceY, HumPos.Y - DistanceY * 2) - Vector2.new(HumPos.X - DistanceY, HumPos.Y + DistanceY * 2)).Magnitude 
                        local healthoffset = plr.Character.Humanoid.Health / plr.Character.Humanoid.MaxHealth * d

                        library.greenhealth.From = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y + DistanceY * 2)
                        library.greenhealth.To = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y + DistanceY * 2 - healthoffset)

                        library.healthbar.From = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y + DistanceY * 2)
                        library.healthbar.To = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y - DistanceY * 2)

                        local green = Color3.fromRGB(0, 255, 0)
                        local red = Color3.fromRGB(255, 0, 0)

                        library.greenhealth.Color = red:lerp(green, plr.Character.Humanoid.Health / plr.Character.Humanoid.MaxHealth)

                        -- Update Name ESP
                        library.name.Position = Vector2.new(head.X, head.Y - DistanceY * 2.2) -- Slightly above the head
                        library.name.Text = plr.DisplayName -- Fixed nickname display
                        library.name.Size = 12 -- Fixed size

                        if Team_Check.TeamCheck then
                            if plr.TeamColor == player.TeamColor then
                                Colorize(Team_Check.Green)
                            else
                                Colorize(Team_Check.Red)
                            end
                        elseif TeamColor then
                            Colorize(plr.TeamColor.Color)
                        else
                            library.box.Color = Settings.Box_Color
                        end
                        Visibility(true, library)
                    else 
                        Visibility(false, library)
                    end
                else
                    Visibility(false, library)
                end
            else
                Visibility(false, library)
                if game.Players:FindFirstChild(plr.Name) == nil then
                    connection:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Updater)()
end

for _, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v.Name ~= player.Name then
        coroutine.wrap(ESP)(v)
    end
end



game.Players.PlayerAdded:Connect(function(newplr)
    if newplr.Name ~= player.Name then
        coroutine.wrap(ESP)(newplr)
    end
end)



local function GetFovTarget()
    local Target
    local LowestDistance = math.huge

    for i,v in pairs(Players.GetPlayers(Players)) do
        local Char = v.Character

        if v ~= Player and Char then
            local Hmrp = Char.FindFirstChild(Char,"HumanoidRootPart")
            local SilentPart = Char.FindFirstChild(Char,SilentAimPart)

            if Hmrp and SilentPart then
                local ScreenPos,OnScreen = Camera.WorldToViewportPoint(Camera,Hmrp.Position)
                local Distance = (SilentFovCircle.Position - Vector2.new(ScreenPos.X,ScreenPos.Y)).Magnitude

                if Distance < SilentFovCircle.Radius and Distance < LowestDistance and OnScreen then
                    Target = v
                    LowestDistance = Distance
                end
            end
        end
    end

    return Target
end

oldNamecall = hookmetamethod(game,"__namecall",function(self,...)
    if getnamecallmethod() == "Raycast" then
        local args = {...}

        local Target = GetFovTarget(SilentFovCircle)

        if Target then
            args[2] = Target.Character[SilentAimPart].Position - args[1]

            return oldNamecall(self,unpack(args))
        end
    end

    return oldNamecall(self,...)
end)

